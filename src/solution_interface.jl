"""
    AbstractAnalysisSolution

The abstract type and interface on the Julia result from running
an analysis.

## interface

All `AbstractAnalysisSolution`s must implement this interface:

  - `AnalysisSolutionMetadata(::AbstractAnalysisSolution)` returns a serializable description of the visualizations that can be constructed from the solution object.
  - `artifacts(::AbstractAnalysisSolution, name::Symbol)` returns the artifacts of name `name`. The allowed `artifact`s are defined by the `AnalysisArtifactMetadata` provided by `get_metadata`.
  - `customizable_visualization(::AbstractAnalysisSolution, ::AbstractVisualizationSpec)` returns a visualization object. For example, for a `PlotlyVisualizationSpec`, this would return a Plots.jl
    plot built by the Plotly backend.
  - `serialize_solution(serializable_solution::AbstractAnalysisSolution)` and `deserialize_solution(serialized_solution)::AbstractAnalysisSolution`, where the visualizations from the deserialized version should be the same as the version that is never serialized.
"""
abstract type AbstractAnalysisSolution end

"""
    ArtifactType

The set of allowed artifact types for an `AbstractAnalysisSolution`.
"""
EnumX.@enumx ArtifactType begin
    """
        ArtifactType.PlotlyPlot

    A plot generated by Plots.jl with the Plotly backend to be displayed
    in Dyad Builder with a few modifications.
    """
    PlotlyPlot

    """
        ArtifactType.DataFrame

    A DataFrames.jl DataFrame table of results to be displayed in Dyad Builder
    in an interactive table.
    """
    DataFrame

    """
        ArtifactType.Download

    A blob that is meant to be downloaded on
    demand by the user. This blob should be a standard serializable object
    that the user knows how to deal with, such as an FMU or JLD2 file.
    """
    Download

    """
        ArtifactType.Native

    A native julia type that can use useful for interactive usage.
    """
    Native
end

"""
    ArtifactMetadata

Metadata describing an available artifacts for a given
AbstractAnalysisSolution.

## Fields

  - `name::Symbol`: The name of the artifact. This is meant to be a unique
    symbol identifer which is then used in the `artifacts` function in order
    to choose this plot.
  - `type::ArtifactType`: The type of the artifact.
  - `title::String`: The title of the artifact. This is meant to be the display
    name in Dyad Builder for the user to select the artifact.
  - `description::String`: The description of the artifact. This is meant to be a
    more detailed description that will be shown to Dyad Builder user if they ask for more information
    about the artifact.
"""
struct ArtifactMetadata
    name::Symbol
    type::ArtifactType.T
    title::String
    description::String
end

StructTypes.StructType(::Type{ArtifactMetadata}) = Struct()
Base.nameof(a::ArtifactMetadata) = a.name

"""
    AnalysisSolutionMetadata(sol::AbstractAnalysisSolution)

A serializable description of the visualizations that are allowed from
a given `AbstractAnalysisSolution`.

## Fields

  - `artifacts`::Vector{ArtifactMetadata}`: a description
    of the artifacts allowed for the given analysis solution
  - `allowed_symbols::Vector{Symbol}`: the symbols which are allowed to be chosen
    in the customizable visualization.
"""
struct AnalysisSolutionMetadata
    artifacts::Vector{ArtifactMetadata}
    allowed_symbols::Vector{Symbol}
end

StructTypes.StructType(::Type{AnalysisSolutionMetadata}) = Struct()

"""
    rebuild_sol(sol::AbstractAnalysisSolution)

[EXPERIMENTAL]: Rebuild the fields of a serialized [`AbstractAnalysisSolution`](@ref) such that it can be
used for plotting. Currently it is assumend that [`run_analysis`](@ref) is stripping the solution
such that the resulting `AbstractAnalysisSolution` is easily serializable.
"""
function rebuild_sol(sol::AbstractAnalysisSolution)
    sol
end

"""
    AbstractStandardVisualizationSpec

An AbstractCustomizableVisualizationSpec is a visualization spec for a "customizable visualization".
Each `AbstractAnalysisSolution` is imbued with a customizable visualization which Dyad Builder has
more plotting controls on, and this type is the specification of those plot controls on the
standrad plot.
"""
abstract type AbstractCustomizableVisualizationSpec end

"""
    Attribute

## Plotting options special cased in Dyad Builder.
"""
struct Attribute
    title::String
    description::String
    default_value::Any
end

"""
    PlotlyVisualizationSpec <: AbstractCustomizableVisualizationSpec

The plot controls for a standard Plotly plot.

## Fields

  - `symbols::Vector{Symbol}`: The symbols specifying the parts of the solution to plot. This should
    be a subset of the `allowed_symbols` from the `AnalysisSolutionMetadata`.
  - `plots_attributes`: The plotting attributes changing items like color, font size, etc. for the standard
    visualization. These attributes are required to match the Plots.jl standard attributes and it is designed
    to be a valid structure for splatting into a plot call, i.e. `plot(something; plots_attributes...)` should
    generate the correct plot with respect to the given attributes.
"""
struct PlotlyVisualizationSpec <: AbstractCustomizableVisualizationSpec
    symbols::Vector{Symbol}
    plots_attributes::Any
    extra_attributes::Vector{Attribute}
end

function PlotlyVisualizationSpec(symbols::Vector{Symbol})
    PlotlyVisualizationSpec(symbols, (;), Attribute[])
end

"""
    artifacts(sol::AbstractAnalysisSolution)

Return the names of the artifacts supported by the given analysis solution
based on the [`AnalysisSolutionMetadata`](@ref).
"""
function artifacts(sol::AbstractAnalysisSolution)
    m = AnalysisSolutionMetadata(sol)
    nameof.(m.artifacts)
end

"""
    artifacts(sol::AbstractAnalysisSolution, name::Symbol)

Generates the artifact with the given `name` for a given `AbstractAnalysisSolution`.
The `name` must be one of the allowed names in the `artifacts(sol)`. The result of this
function should match the corresponding `ArtifactType` declared in the [`AnalysisSolutionMetadata`](@ref).
"""
function artifacts(::AbstractAnalysisSolution, ::Symbol) end

"""
    customizable_visualization(::AbstractAnalysisSolution, ::PlotlyVisualizationSpec)

Generates the standard visualization of a given `AbstractAnalysisSolution`. This standard
visualization should respect the formatting decisions as specified by `PlotlyVisualizationSpec`
and the return should be a Plots.jl-generated plot generated by the Plotly backend.

If the analysis does not have customizable visualization, it should return `missing`,
which is also the default fallback method.
"""
function customizable_visualization(::AbstractAnalysisSolution, ::PlotlyVisualizationSpec)
    missing
end

"""
    serialize_solution(filename::AbstractString, serializable_solution::AbstractAnalysisSolution)

Generates a serialized artifact for long term storage and saves it at the filename location. The default implementation accepts any julia type that is
serializable via the Serialization package. This function can be overridden if the analysis implementer wants to
serialize using a different method.
"""
function serialize_solution(filename::AbstractString,
        serializable_solution::AbstractAnalysisSolution)
    serialize(filename, serializable_solution)
end

"""
    deserialize_solution(filename::AbstractString)::AbstractAnalysisSolution

Regenerates the original solution that was serialized using serialize_solution from an artifact located at the filename path.
The default implementation will regenerate any solution the was serialized via the Serialization package.
This function can be overridden if the analysis implementer wants to deserialize using a different method.
"""
function deserialize_solution(filename::AbstractString)::AbstractAnalysisSolution
    deserialize(filename)
end
